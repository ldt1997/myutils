{"version":3,"sources":["../scripts/set.js"],"names":["basepath","cptName","process","argv","splice","path","split","name","length","writes","reads","__dirname","file","author","require","homedir","pop","exists","Promise","res","rej","a","fs","existsSync","mkdir","err","then","console","log","catch","readFile","text","readFileSync","toString","replace","format","push","writeFile","i","creatPage","error"],"mappings":";;AAEA;;;;AACA;;;;AACA;;;;AAEA,IAAIA,WAAW,YAAf;AACA,IAAIC,UAAUC,QAAQC,IAAR,CAAaC,MAAb,CAAoB,CAApB,EAAuB,CAAvB,CAAd;AACA,IAAIC,OAAOJ,QAAQK,KAAR,CAAc,GAAd,CAAX;AACA,IAAIC,OAAOF,KAAKA,KAAKG,MAAL,GAAc,CAAnB,CAAX;AACA,IAAIC,SAAS,kDAIDF,IAJC,6BAKCA,IALD,iBAAb;AAOA,IAAIG,QAAQ,CACPC,SADO,kCAEPA,SAFO,kCAGPA,SAHO,mCAIPA,SAJO,yCAKPA,SALO,6CAAZ;AAOA,IAAIC,OAAO,EAAX;AACA,IAAIC,SAASC,QAAQ,IAAR,EACVC,OADU,GAEVT,KAFU,CAEJ,IAFI,EAGVU,GAHU,EAAb;;AAKA;AACA,IAAIC,SAAS,SAATA,MAAS,GAAW;AACtB,SAAO,IAAIC,OAAJ,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC/B,KAAC,kBAAiB;AAAA;AAAA;AAAA;;AAAA;AAChB,6BAAcf,IAAd,8HAAoB;AAAA,cAAXgB,CAAW;;AAClBC,uBAAGC,UAAH,CAAcvB,WAAWqB,CAAzB,IACKrB,gBAAcA,QAAd,GAAyBqB,CAAzB,MADL,GAEI,MAAMG,MAAMH,CAAN,CAFV;AAGD;AALe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMhBF,UAAInB,QAAJ;AACD,KAPD;AAQD,GATM,CAAP;AAUD,CAXD;AAYA;AACA,IAAIwB,QAAQ,SAARA,KAAQ,CAASH,CAAT,EAAY;AACtB,SAAO,IAAIH,OAAJ,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC/BE,iBAAGE,KAAH,CAASxB,WAAWqB,CAApB,EAAuB,eAAO;AAC5B,UAAII,GAAJ,EAASL,IAAIK,GAAJ;AACTzB,sBAAcA,QAAd,GAAyBqB,CAAzB;AACAF,UAAInB,QAAJ;AACD,KAJD;AAKD,GANM,EAOJ0B,IAPI,CAOC,YAAM;AACVJ,iBAAGE,KAAH,CAAYxB,QAAZ,aAA8B,eAAO;AACnC,UAAIyB,GAAJ,EAASE,QAAQC,GAAR,CAAYH,GAAZ;AACV,KAFD;AAGAH,iBAAGE,KAAH,CAAYxB,QAAZ,eAAgC,eAAO;AACrC,UAAIyB,GAAJ,EAASE,QAAQC,GAAR,CAAYH,GAAZ;AACV,KAFD;AAGD,GAdI,EAeJI,KAfI,CAeE;AAAA,WAAOF,QAAQC,GAAR,CAAYH,GAAZ,CAAP;AAAA,GAfF,CAAP;AAgBD,CAjBD;AAkBA;AACA,IAAIK,WAAW,SAAXA,QAAW,GAAW;AACxB,SAAO,IAAIZ,OAAJ,CAAY,eAAO;AAAA;AAAA;AAAA;;AAAA;AACxB,4BAAcR,KAAd,mIAAqB;AAAA,YAAZW,CAAY;;AACnB,YAAIU,OAAOT,aAAGU,YAAH,CAAgBX,CAAhB,EAAmBY,QAAnB,EAAX;AACAF,eAAOA,KACJG,OADI,CACI,OADJ,EACa,wBAASC,MAAT,CAAgB,YAAhB,CADb,EAEJD,OAFI,CAEI,OAFJ,EAEa3B,IAFb,EAGJ2B,OAHI,CAGI,SAHJ,EAGerB,MAHf,CAAP;AAIAD,aAAKwB,IAAL,CAAUL,IAAV;AACD;AARuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASxBZ,QAAIP,IAAJ;AACD,GAVM,CAAP;AAWD,CAZD;AAaA;AACA,IAAIyB,YAAY,SAAZA,SAAY,CAASzB,IAAT,EAAe;AAC7B,SAAO,IAAIM,OAAJ,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC/B,KAAC,kBAAiB;AAChB,WAAK,IAAIkB,IAAI,CAAb,EAAgBA,IAAI7B,OAAOD,MAA3B,EAAmC8B,GAAnC,EAAwC;AACtC,cAAMhB,aAAGe,SAAH,MAAgBrC,QAAhB,GAA2BS,OAAO6B,CAAP,CAA3B,EAAwC1B,KAAK0B,CAAL,CAAxC,EAAiD,eAAO;AAC5D,cAAIb,GAAJ,EAASL,IAAIK,GAAJ;AACV,SAFK,CAAN;AAGD;AACDN,UAAI,MAAJ;AACD,KAPD;AAQD,GATM,CAAP;AAUD,CAXD;AAYA,eAAeoB,SAAf,GAA2B;AACzB,MAAI;AACF,UAAMtB,QAAN;AACA,UAAMa,UAAN;AACA,UAAMO,WAAU,MAAMP,UAAhB,EAAN;AACA,WAAOH,QAAQC,GAAR,2BAAoCrB,IAApC,WAAP;AACD,GALD,CAKE,OAAOkB,GAAP,EAAY;AACZE,YAAQa,KAAR,CAAcf,GAAd;AACD;AACF;AACDc","file":"set.js","sourcesContent":["\n\nimport fs from \"fs\";\nimport moment from \"moment\";\nimport { dirname } from \"path\";\n\nlet basepath = \"src/pages/\";\nlet cptName = process.argv.splice(2)[0];\nlet path = cptName.split(\"/\");\nlet name = path[path.length - 1];\nlet writes = [\n  `index.js`,\n  `Page.jsx`,\n  `Page.less`,\n  `models/${name}Model.js`,\n  `services/${name}Services.js`\n];\nlet reads = [\n  `${__dirname}/../src/pages/demo/index.js`,\n  `${__dirname}/../src/pages/demo/Page.jsx`,\n  `${__dirname}/../src/pages/demo/Page.less`,\n  `${__dirname}/../src/pages/demo/models/model.js`,\n  `${__dirname}/../src/pages/demo/services/services.js`\n];\nlet file = [];\nlet author = require(\"os\")\n  .homedir()\n  .split(\"\\\\\")\n  .pop();\n\n//检测是否存在文件夹\nlet exists = function() {\n  return new Promise((res, rej) => {\n    (async function() {\n      for (let a of path) {\n        fs.existsSync(basepath + a)\n          ? (basepath = `${basepath}${a}/`)\n          : await mkdir(a);\n      }\n      res(basepath);\n    })();\n  });\n};\n//建立文件夹\nlet mkdir = function(a) {\n  return new Promise((res, rej) => {\n    fs.mkdir(basepath + a, err => {\n      if (err) rej(err);\n      basepath = `${basepath}${a}/`;\n      res(basepath);\n    });\n  })\n    .then(() => {\n      fs.mkdir(`${basepath}models`, err => {\n        if (err) console.log(err);\n      });\n      fs.mkdir(`${basepath}services`, err => {\n        if (err) console.log(err);\n      });\n    })\n    .catch(err => console.log(err));\n};\n//读取模板文件内容，并替换为目标组件\nlet readFile = function() {\n  return new Promise(res => {\n    for (let a of reads) {\n      let text = fs.readFileSync(a).toString();\n      text = text\n        .replace(/time/g, moment().format(\"YYYY/MM/DD\"))\n        .replace(/temp/g, name)\n        .replace(/author/g, author);\n      file.push(text);\n    }\n    res(file);\n  });\n};\n//生成文件，并填入之前读取的文件内容\nlet writeFile = function(file) {\n  return new Promise((res, rej) => {\n    (async function() {\n      for (let i = 0; i < writes.length; i++) {\n        await fs.writeFile(`${basepath}${writes[i]}`, file[i], err => {\n          if (err) rej(err);\n        });\n      }\n      res(\"succ\");\n    })();\n  });\n};\nasync function creatPage() {\n  try {\n    await exists();\n    await readFile();\n    await writeFile(await readFile());\n    return console.log(`Successfully created ${name} page`);\n  } catch (err) {\n    console.error(err);\n  }\n}\ncreatPage();\n"]}